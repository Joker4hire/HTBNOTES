<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <node unique_id="32" master_id="0" name="Practice" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1743455528" ts_lastsave="1743455608">
    <rich_text>            
</rich_text>
    <rich_text scale="h1">Practice</rich_text>
    <rich_text>
All the theories in the world will be of no use to us if we cannot  transfer them into practice and apply our knowledge to real-world,  hands-on situations. Putting the Tactics, Techniques, and Procedures  (TTPs) we have covered in the Penetration Tester path into use  frequently is the best thing we could do to keep our skills sharp and  ensure that when it comes time to put them to work in a customer's  environment, we are sure of ourselves and the potential impact our  actions may have. Technical skills are only half the battle, however. We  also need excellent written and verbal communication skills to be  effective penetration testers. This includes seemingly minor things like  being able to write a clear and professional email and present and  defend our work during a client meeting and through a professional  report.
You will often find yourself working with a team in this field, and  as a team, we can help each other grow and hone our skills. Need to  practice leading a kickoff call with a customer? Have a friend or  teammate act as a fictitious customer. Use that time to practice asking  your initial scoping questions and defining the pentest you expect to  deliver. These same actions can be used when practicing delivering your  post-engagement report walkthrough briefing for a client.
Penetration testing is fun. We get to attack a network and act like  real-world hackers for a period of time. What some people may find  boring, however, is an essential part: thorough documentation and strong  reporting skills. A client won't be able to do much with a vague  two-page report (the same way a two-section module wouldn't do you much  good). If we were contracted by a Fortune 500 company and able to take  control of their entire domain without triggering an alarm, we'll need  to be able to prove it. If we can't back up our assertions with clear  evidence, we'll lose credibility, and our work will be called into  question.
Similarly, if we have 50+ pages of documentation, we have  considerably more evidence to back up our work and we're more likely to  make an impression on the decision-makers in the client company. That  being said, if our presentation is sloppy and the report is difficult to  follow or does not go in-depth on vulnerability reproduction steps and  give clear remediation recommendations, or the executive summary is  poorly written, our hard work will not be well-received. Documentation  and reporting (including how to write a high-quality report) will be  covered in another module. This module also gives many suggestions and  resources for practicing this critical soft skill.
 Note: When working on a pentest team, we would often practice client kickoff calls and report review meetings with each other. We practiced reviewing the results and drilled each other on our report content and the recommendations we gave to our clients. When our clients asked questions or disputed our recommendations, we were prepared to handle the situation and could answer clearly on the spot as to why we would recommend a specific fix. This type of practice will surely give you a more polished and professional look. 
As crucial as the client-facing portions of a penetration test are,  they won't much matter if we don't practice our hands-on keyboard  skills. Practicing will help us see what comes naturally to us and what  areas we need to improve. Reading is not a replacement for hands-on  practice (though written theory is crucial for developing a deep  understanding of the myriad of topics we cover). Once certain tasks  become second nature through considerable practice, we will save time  and energy that can be used to dig deep on client assessments or for our  own research and analysis.
We may be wizards in web exploitation but struggle when facing an  Active Directory environment. Ideally, you will practice in lab  environments that match your clients. ( If you often pentest against  organizations that use specific equipment like the medical field,  ideally, you will have replications of common devices you could  encounter to test against.) But that's not always feasible. So what can  you do? Well, in Hack The Box, we have many different ways for you to  hone your skills. Everything from the active machines to challenges to  Prolabs and Battlegrounds can be used to get further hands-on experience  dealing with all classes of vulnerabilities. The modules here in HTB  Academy provide an excellent resource to practice our skills. Many of  the modules in the Penetration Tester Job Role Path feature labs that  can be approached as mock penetration tests. This repetition may be  tedious on the front end, but it will save countless hours that we can  use to continue improving. The steps below can help guide us on a path  to practicing what we have learned:

</rich_text>
    <rich_text scale="h2">Practicing Steps</rich_text>
    <rich_text>
Think about the skills you have gained and what interests you the  most from them. From there, we can pick out a few more modules to  increase our knowledge, machines to practice on, and Prolabs or Endgames  to really put ourselves to the test. The numbers below are a good  starting example:
• 2x Modules
• 3x Retired Machines
• 5x Active Machines
• 1x Pro Lab / Endgame


</rich_text>
    <rich_text scale="h4">Modules</rich_text>
    <rich_text>
The modules chosen should be categorized according to </rich_text>
    <rich_text family="monospace">two different difficulties</rich_text>
    <rich_text>: </rich_text>
    <rich_text family="monospace">technical</rich_text>
    <rich_text> and </rich_text>
    <rich_text family="monospace">offensive</rich_text>
    <rich_text>.  We use these to familiarize ourselves with the attacks and the  possibilities and develop an accurate picture and understanding of those  attacks. Then we use the provided exercises and their machines to learn  to apply these techniques and, at the same time to create efficient </rich_text>
    <rich_text family="monospace">notes</rich_text>
    <rich_text> and </rich_text>
    <rich_text family="monospace">screenshots</rich_text>
    <rich_text> for accurate</rich_text>
    <rich_text family="monospace"> documentation</rich_text>
    <rich_text>. Here is a good blueprint for tackling a module:
</rich_text>
    <rich_text justification="left"></rich_text>
    <rich_text>

The selection of several modules allows us to deal with different  technologies and issues we may face. We will discover various aspects  that need to be considered and sometimes documented/notated in more  detail than before. These notes will be quite valuable as we move along  in our careers. Some pairings of technologies and attack vectors can be  rare to see in the wild, so having detailed notes about those systems  from when you interacted with them will help you progress through an  assessment quicker where you encounter them.
After completing the module, we should create minor </rich_text>
    <rich_text family="monospace">technical</rich_text>
    <rich_text> and </rich_text>
    <rich_text family="monospace">non-technical</rich_text>
    <rich_text>  documentation (i.e., create sample technical findings and reproduction  steps and executive summary entries that could be included in a report).  Focus on practicing creating "client-ready" documentation. Many people  underestimate the amount of knowledge and skills that are imprinted  through the creation of the documentation. Practicing writing  documentation can help cement some topics in our minds and make it  easier for us to explain concepts to both technical and non-technical  audiences.

</rich_text>
    <rich_text scale="h4">Retired Machines</rich_text>
    <rich_text>
When we have completed (at least) two modules and are satisfied with  our notes and documentation, we can select three different retired  machines. These should also differ in difficulty, but we recommend  choosing </rich_text>
    <rich_text family="monospace">two easy</rich_text>
    <rich_text> and </rich_text>
    <rich_text family="monospace">one medium</rich_text>
    <rich_text> machines. At  the end of each module, you will find recommended retired machines to  consider that will help you practice the specific tools and topics  covered in the module. These hosts will share one or more attack vectors  tied to the module.
With the retired machines, we have a significant advantage in that we  can find existing write-ups online from many different authors (all  with varying approaches) with which we can compare our notes. If we opt  to purchase a VIP membership on the HTB main platform, we will also have  access to official HTB write-ups that present another viewpoint and  often include some defensive considerations. We can use these write-ups  to compare whether we have noted everything necessary and have not  overlooked anything. The order in which we can proceed to practice with  the retired machines looks something like this:
</rich_text>
    <rich_text justification="left"></rich_text>
    <rich_text>

Finally, we should create </rich_text>
    <rich_text family="monospace">technical</rich_text>
    <rich_text> and </rich_text>
    <rich_text family="monospace">non-technical</rich_text>
    <rich_text>  documentation again. We will find that this one will likely be more  extensive than the previous ones because we are working with many more  topics we need to cover and document here. The most significant  advantage of this approach is that we go through the entire penetration  testing process, improving the way we capture essential information and  have everything we need to prepare our documentation based on our  experiences and notes.

</rich_text>
    <rich_text scale="h4">Active Machines</rich_text>
    <rich_text>
After building a good foundation with the modules and the retired machines, we can venture to </rich_text>
    <rich_text family="monospace">two easy</rich_text>
    <rich_text>, </rich_text>
    <rich_text family="monospace">two medium</rich_text>
    <rich_text>, and </rich_text>
    <rich_text family="monospace">one hard</rich_text>
    <rich_text> active machine. We can also take these from the corresponding module recommendations at the end of each module in Academy.
The advantage of this method is that we simulate as realistic a  situation as possible using a single host that we have no familiarity  with and cannot find documentation on (blackbox approach). As long as  the machine remains active, no official write-ups will be published.  This means that we cannot check whether we have everything or whether we  have missed something from any official source. This puts us in the  situation of relying on ourselves and our abilities. Ideal practice  steps for active machines would look like this:
</rich_text>
    <rich_text justification="left"></rich_text>
    <rich_text>

Proofreading gives us our first impressions of how the readers  receive the two types of documentation. This gives us an idea of which  aspects of our documentation need to be improved for both technical and  non-technical audiences. As we can already imagine, not many  non-technical people are interested in reading this type of  documentation. Therefore, we need to design the non-technical  documentation to be </rich_text>
    <rich_text family="monospace">informative</rich_text>
    <rich_text>, </rich_text>
    <rich_text family="monospace">high quality</rich_text>
    <rich_text>, and kept </rich_text>
    <rich_text family="monospace">concise</rich_text>
    <rich_text> but meaningful and free of highly technical jargon. More about this is covered in the </rich_text>
    <rich_text link="webs https://academy.hackthebox.com/module/details/162">Documentation &amp; Reporting</rich_text>
    <rich_text> module.

</rich_text>
    <rich_text scale="h4">Pro Lab/Endgame</rich_text>
    <rich_text>
Once we feel comfortable going against singular hosts and documenting  our findings, we can take on Prolabs and Endgames. These labs are large  multi-host environments that often simulate enterprise networks of  varying sizes similar to those we could run into during actual  penetration tests for our clients. This will present us with different  challenges than we are used to. We will no longer be focusing on a  single host and now have to consider how the different hosts interact  with each other. These interactions will make for new and interesting  vectors we can potentially practice against as well. For example,  running a tool like </rich_text>
    <rich_text family="monospace">Responder</rich_text>
    <rich_text> in an Active Directory  environment to see traffic and capture a user's password hash or some  sort of user interaction is much more likely in a simulated network than  when attacking a single box. Attacking infrastructure with several  interconnected hosts and network components will create additional  connections we need to consider in our documentation. Instead of showing  how to complete a single host from start to finish, we will need to  practice writing up an entire attack chain, showing our path from  foothold to network compromise. This, again, is covered in the </rich_text>
    <rich_text family="monospace">Documentation &amp; Reporting</rich_text>
    <rich_text> module. The practice we have from the previous tasks will make this much easier for us as everything builds on each other.

</rich_text>
    <rich_text scale="h1">Wrapping Up</rich_text>
    <rich_text>
We have covered a considerable amount of information in this module. If you are just beginning the </rich_text>
    <rich_text family="monospace">Penetration Tester</rich_text>
    <rich_text>  Job Role path, we recommend continuing in the order in which the  modules are presented. If we are new to all this, skipping around could  lead to gaps in knowledge and make certain modules difficult to finish  without prerequisite knowledge. If you are already partially through the  path, it's worth going back through modules that you have already  completed and consider the various steps in the context of the  penetration testing process presented in this module.
Continuous practice and improvement are vital regardless of where you  are in your journey. We can continuously improve on our current  methodology, learn things differently, and learn new concepts. The field  of information technology changes rapidly. New attacks are discovered  frequently, and we need to stay on top of the latest and greatest TTPs  to be as effective as possible and provide our clients with the  necessary information to help secure their environments from an  ever-evolving threat landscape. Never stop learning and improving.  Challenge yourself daily. Take breaks. Enjoy the journey, and don't  forget to </rich_text>
    <rich_text family="monospace">Think Outside The Box</rich_text>
    <rich_text>!
                                            
</rich_text>
    <table char_offset="5747" justification="left" col_min="60" col_max="60" col_widths="0,0">
      <row>
        <cell>1.</cell>
        <cell>Read the module</cell>
      </row>
      <row>
        <cell>2.</cell>
        <cell>Practice the exercises</cell>
      </row>
      <row>
        <cell>3.</cell>
        <cell>Complete the module</cell>
      </row>
      <row>
        <cell>4.</cell>
        <cell>Start the module exercises from scratch</cell>
      </row>
      <row>
        <cell>5.</cell>
        <cell>While solving the exercises again, take notes</cell>
      </row>
      <row>
        <cell>6.</cell>
        <cell>Create technical documentation based on the notes</cell>
      </row>
      <row>
        <cell>7.</cell>
        <cell>Create non-technical documentation based on the notes</cell>
      </row>
      <row>
        <cell>Step</cell>
        <cell>Task</cell>
      </row>
    </table>
    <table char_offset="7992" justification="left" col_min="60" col_max="60" col_widths="0,0">
      <row>
        <cell>1.</cell>
        <cell>Get the user flag on your own</cell>
      </row>
      <row>
        <cell>2.</cell>
        <cell>Get the root flag on your own</cell>
      </row>
      <row>
        <cell>3.</cell>
        <cell>Write your technical documentation</cell>
      </row>
      <row>
        <cell>4.</cell>
        <cell>Write your non-technical documentation</cell>
      </row>
      <row>
        <cell>5.</cell>
        <cell>Compare your notes with the official write-up (or a community write-up if you don't have a VIP subscription</cell>
      </row>
      <row>
        <cell>6.</cell>
        <cell>Create a list of information you have missed</cell>
      </row>
      <row>
        <cell>7.</cell>
        <cell>Watch Ippsec's walkthrough and compare it with your notes</cell>
      </row>
      <row>
        <cell>8.</cell>
        <cell>Expand your notes and documentation by adding the missed parts</cell>
      </row>
      <row>
        <cell>Step</cell>
        <cell>Task</cell>
      </row>
    </table>
    <table char_offset="9298" justification="left" col_min="60" col_max="60" col_widths="0,0">
      <row>
        <cell>1.</cell>
        <cell>Get the user and root flag</cell>
      </row>
      <row>
        <cell>2.</cell>
        <cell>Write your technical documentation</cell>
      </row>
      <row>
        <cell>3.</cell>
        <cell>Write your non-technical documentation</cell>
      </row>
      <row>
        <cell>4.</cell>
        <cell>Have it proofread by technical and non-technical persons</cell>
      </row>
      <row>
        <cell>Step</cell>
        <cell>Task</cell>
      </row>
    </table>
  </node>
</cherrytree>
